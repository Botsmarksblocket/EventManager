@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims;
@attribute [Authorize(Roles ="Admin")] 
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@page "/home"

<PageTitle>Event Manager</PageTitle>

<h1>Event Manager</h1>

<p>Här kan du kul evenemang i din närhet.</p>

<div class="featured-events">
	<h2>Event evenemang</h2>
	<ul>
		<li>Sommarfestival 2023</li>
		<li>Tech Conference 2023</li>
		<li>Matmarknad i Stadsparken</li>
	</ul>
</div>

<div class="cta-buttons">
	<button class="btn btn-primary">Sök evenemang</button>
	<button class="btn btn-secondary">Skapa konto</button>
</div>

@code {
    private ClaimsPrincipal _currentUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _currentUser = authState.User;

        // Debug: Output current user's role
        var userRole = _currentUser.FindFirst(ClaimTypes.Role)?.Value;
        Console.WriteLine($"Current role: {userRole}");

        if (_currentUser.Identity.IsAuthenticated && userRole == "Admin")
        {
            // User has the "Admin" role, proceed with the page
        }
        else
        {
            // Redirect to access-denied page
            Navigation.NavigateTo("/access-denied");
        }
    }
}