@page "/userdashboard"
@using EventManager.Client.Components.Admin
@using EventManager.Client.Models
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h1>Manage Users</h1>

@if (!showForm)
{
    <UserList Users="users" OnEdit="HandleEdit"/>
    <button class="btn btn-primary" @onclick="HandleCreate">Publish New Event</button>
}
else
{
    <GenericCard TItem="User">
        <HeaderTemplate>
             <h3>@(isNew ? "Create New User" : "Edit User")</h3>
        </HeaderTemplate>
        <ChildContent>
            <UserForm 
             User="_user"
            IsNew="isNew"
             OnSubmit="
             HandleSubmit"
             OnCancel="HandleCancel"
              OnDelete="HandleDelete"/>
        </ChildContent>
    </GenericCard>
}

@code {
    private bool isNew = true;
    private bool showForm = false;
    private List<User> users = [];
    private User _user = new()
    {
        @* Name = "New Event",
        Description = "",
        StartTime = DateTime.UtcNow,
        EndTime = DateTime.UtcNow,
        MaxAttendees = 100 *@
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await HttpClient.GetFromJsonAsync<List<User>>("/users") ?? [];
                
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching events: {ex.Message}");
            users = [];
        }
    }
    
    //Create Event
    private async Task HandleCreate()
    {
        _user = new()
        {
            Username = "Nytt event",
            @* Email = "", *@
            Role = ""
        };
        isNew = true;
        showForm = true;
    }

    //Update Event
    //TODO: create put endpoint and patch endpoint
    private async Task HandleEdit(string id)
    {
        try
        {
            var userToEdit = await HttpClient.GetFromJsonAsync<User>($"/events/{id}");
            if (userToEdit != null)
            {
                _user = userToEdit;
                isNew = false;
                showForm = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing user: {ex.Message}");
        }
    }

    // Submit Event
    private async Task HandleSubmit()
    {
        if (isNew)
        {
            try
            {
                await HttpClient.PostAsJsonAsync("/users", _user);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating user: {ex.Message}");
            }
        }
        else
        {
            try
            {
                await HttpClient.PatchAsJsonAsync($"/events/{_user.Id}", _user);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating event: {ex.Message}");
            }
        }
        users = await HttpClient.GetFromJsonAsync<List<User>>("/users") ?? [];
        showForm = false;
    }

    // Cancel create/update
    private void HandleCancel()
    {
        showForm = false;
    }

    // Delete Event
    private async Task HandleDelete(string id)
    {
        try
        {
            var response = await HttpClient.DeleteAsync($"/users/{_user.Id}");
            if (response.IsSuccessStatusCode)
            {
                users = await HttpClient.GetFromJsonAsync<List<User>>("/users") ?? [];
                showForm = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
        
    }
}



@* private List<Event> dummyEvents = new List<Event>{
        new Event {
            Id=1, 
            Name="Putte Bajsar i Parken 2025",
            Description="Putte Bajsar i Parken 2025: En unik festival där besökare kan uppleva den ultimata blandningen av musik, natur och... oväntad flatulens! Kom och se Putte göra det han gör bäst, mitt i vår vackra park. Glöm inte att ta med stövlar och näsklämma!",
            Start = DateTime.Parse("2025-06-17"),
            End=DateTime.Parse("2025-06-19"),
            MaxAttendees=500
        },
        new Event {
            Id=2, 
            Name="Kalle Anka's Underbara Byxlösa Äventyr 2026",
            Description="Kalle Anka's Underbara Byxlösa Äventyr 2026: En hisnande upplevelse där Kalle Anka tappar sina byxor och måste navigera genom Ankeborg helt exponerad! Följ med på en skrattfylld resa full av pinsamma situationer, kreativa gömställen och oväntade hjältar. Glöm inte att ta med en extra uppsättning byxor - man vet aldrig när Kalle kan behöva dem!",
            Start = DateTime.Parse("2026-07-01"),
            End=DateTime.Parse("2026-07-03"),
            MaxAttendees=1000
        }
    }; *@
