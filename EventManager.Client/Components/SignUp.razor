@using Models.SignUp;
@inject HttpClient httpClient;

<EditForm Model="@SignUpModel" OnValidSubmit="HandleSignUp">
	<div class="container">
		<DataAnnotationsValidator />

		<h1>Sign up</h1>
		<div class="form-group">
			<label for="Username">Enter username: </label>
			<InputText id="Username" class="input" @bind-Value="@SignUpModel.Username" />
			<ValidationMessage For="@(() => SignUpModel.Username)"/>
		</div>

		<div class="form-group">
			<label for="Password">Enter password: </label>
			<InputText id="Password" class="input" type=password @bind-Value="@SignUpModel.Password"/>
			<ValidationMessage For="@(() => SignUpModel.Password)" />

		</div>
		<div class="form-group">
			<label for="RepeatPassword">Repeat your password</label>
			<InputText id="RepeatPassword" class="input" type=password @bind-Value="@SignUpModel.RepeatPassword"/>
			<ValidationMessage For="@(() => SignUpModel.RepeatPassword)" />
		</div>

		@if (!string.IsNullOrEmpty(Message))
		{
			<div class="@MessageClass">@Message</div>
		}

		<button type="submit" class="btn">Sign up</button>
	</div>
</EditForm>


@code {
	[SupplyParameterFromForm]
	private SignUpModel SignUpModel { get; set; } = new SignUpModel();
	private string? Message;
	private string MessageClass;

	private async Task HandleSignUp()
	{
		MessageClass = "hidden";
		var response = await httpClient.PostAsJsonAsync("https://localhost:7206/auth/register", new
		{
			Username = SignUpModel.Username,
			Password = SignUpModel.Password
		});

		if (response.IsSuccessStatusCode)
		{
			Message = "Sign up successful!";
			MessageClass = "alert alert-success";
		}
		else
		{
			Message = "Something went wrong, please try again.";
			MessageClass = "alert alert-error";
		}
	}
}
